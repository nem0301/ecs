// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU-external.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU-external {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    
    //Addr or inst  :   instruction[15]
    //a             :   instruction[12]
    //c1            :   instruction[11]
    //c2            :   instruction[10]
    //c3            :   instruction[9]
    //c4            :   instruction[8]
    //c5            :   instruction[7]
    //c6            :   instruction[6]
    //d1            :   instruction[5]
    //d2            :   instruction[4]
    //d3            :   instruction[3]
    //j1            :   instruction[2]
    //j2            :   instruction[1]
    //j3            :   instruction[0]
    

    //Decode
    Mux(a=false ,b=instruction[12], sel=instruction[15], out=a);
    Mux(a=false ,b=instruction[11], sel=instruction[15], out=c1);
    Mux(a=false ,b=instruction[10], sel=instruction[15], out=c2);
    Mux(a=false ,b=instruction[9], sel=instruction[15], out=c3);
    Mux(a=false ,b=instruction[8], sel=instruction[15], out=c4);
    Mux(a=false ,b=instruction[7], sel=instruction[15], out=c5);
    Mux(a=false ,b=instruction[6], sel=instruction[15], out=c6);
    Mux(a=true ,b=instruction[5], sel=instruction[15], out=d1);
    Mux(a=false ,b=instruction[4], sel=instruction[15], out=d2);
    Mux(a=false ,b=instruction[3], sel=instruction[15], out=d3, out=writeM);
    Mux(a=false ,b=instruction[2], sel=instruction[15], out=j1);
    Mux(a=false ,b=instruction[1], sel=instruction[15], out=j2);
    Mux(a=false ,b=instruction[0], sel=instruction[15], out=j3);
    


    Register(in=ALUout, load=d2, out=Dreg);

    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=inst);
    Register(in=inst, load=d1, out=Areg, out[0..14]=addressM);

    Mux16(a=Areg, b=inM, sel=a, out=AorM);


    //ALU
    ALU(x=Dreg, y=AorM, 
            zx=c1,
            nx=c2,
            zy=c3,
            ny=c4,
            f=c5,
            no=c6, 
            out=outM, out=ALUout, zr=zr, ng=ng);


    //PC
    And(a=j1, b=ng, out=lt);
    And(a=j2, b=zr, out=eq);

    Or(a=ng, b=zr, out=o1);
    Not(in=o1, out=o2);
    And(a=j3, b=o2, out=gt);
    
    Or(a=lt, b=eq, out=o3);
    Or(a=o3, b=gt, out=pcload);

    PC(in=Areg, reset=reset, load=pcload, inc=true, out[0..14]=pc);
}

